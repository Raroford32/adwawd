/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ICreditConfiguratorEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AdapterForbidden(address)": EventFragment;
    "AddedToUpgradeable(address)": EventFragment;
    "ContractAllowed(address,address)": EventFragment;
    "ContractForbidden(address)": EventFragment;
    "CreditConfiguratorUpgraded(address)": EventFragment;
    "CreditFacadeUpgraded(address)": EventFragment;
    "CumulativeLossReset()": EventFragment;
    "EmergencyLiquidatorAdded(address)": EventFragment;
    "EmergencyLiquidatorRemoved(address)": EventFragment;
    "ExpirationDateUpdated(uint40)": EventFragment;
    "FeesUpdated(uint16,uint16,uint16,uint16,uint16)": EventFragment;
    "IncreaseDebtForbiddenModeChanged(bool)": EventFragment;
    "LimitPerBlockUpdated(uint128)": EventFragment;
    "LimitsUpdated(uint256,uint256)": EventFragment;
    "MaxEnabledTokensUpdated(uint8)": EventFragment;
    "NewEmergencyLiquidationDiscount(uint16)": EventFragment;
    "NewMaxCumulativeLoss(uint128)": EventFragment;
    "NewTotalDebtLimit(uint128)": EventFragment;
    "PriceOracleUpgraded(address)": EventFragment;
    "RemovedFromUpgradeable(address)": EventFragment;
    "TokenAllowed(address)": EventFragment;
    "TokenForbidden(address)": EventFragment;
    "TokenLiquidationThresholdUpdated(address,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdapterForbidden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddedToUpgradeable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractForbidden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditConfiguratorUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditFacadeUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CumulativeLossReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyLiquidatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyLiquidatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpirationDateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreaseDebtForbiddenModeChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitPerBlockUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxEnabledTokensUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewEmergencyLiquidationDiscount"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMaxCumulativeLoss"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTotalDebtLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromUpgradeable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenForbidden"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenLiquidationThresholdUpdated"
  ): EventFragment;
}

export interface AdapterForbiddenEventObject {
  adapter: string;
}
export type AdapterForbiddenEvent = TypedEvent<
  [string],
  AdapterForbiddenEventObject
>;

export type AdapterForbiddenEventFilter =
  TypedEventFilter<AdapterForbiddenEvent>;

export interface AddedToUpgradeableEventObject {
  arg0: string;
}
export type AddedToUpgradeableEvent = TypedEvent<
  [string],
  AddedToUpgradeableEventObject
>;

export type AddedToUpgradeableEventFilter =
  TypedEventFilter<AddedToUpgradeableEvent>;

export interface ContractAllowedEventObject {
  protocol: string;
  adapter: string;
}
export type ContractAllowedEvent = TypedEvent<
  [string, string],
  ContractAllowedEventObject
>;

export type ContractAllowedEventFilter = TypedEventFilter<ContractAllowedEvent>;

export interface ContractForbiddenEventObject {
  protocol: string;
}
export type ContractForbiddenEvent = TypedEvent<
  [string],
  ContractForbiddenEventObject
>;

export type ContractForbiddenEventFilter =
  TypedEventFilter<ContractForbiddenEvent>;

export interface CreditConfiguratorUpgradedEventObject {
  newCreditConfigurator: string;
}
export type CreditConfiguratorUpgradedEvent = TypedEvent<
  [string],
  CreditConfiguratorUpgradedEventObject
>;

export type CreditConfiguratorUpgradedEventFilter =
  TypedEventFilter<CreditConfiguratorUpgradedEvent>;

export interface CreditFacadeUpgradedEventObject {
  newCreditFacade: string;
}
export type CreditFacadeUpgradedEvent = TypedEvent<
  [string],
  CreditFacadeUpgradedEventObject
>;

export type CreditFacadeUpgradedEventFilter =
  TypedEventFilter<CreditFacadeUpgradedEvent>;

export interface CumulativeLossResetEventObject {}
export type CumulativeLossResetEvent = TypedEvent<
  [],
  CumulativeLossResetEventObject
>;

export type CumulativeLossResetEventFilter =
  TypedEventFilter<CumulativeLossResetEvent>;

export interface EmergencyLiquidatorAddedEventObject {
  arg0: string;
}
export type EmergencyLiquidatorAddedEvent = TypedEvent<
  [string],
  EmergencyLiquidatorAddedEventObject
>;

export type EmergencyLiquidatorAddedEventFilter =
  TypedEventFilter<EmergencyLiquidatorAddedEvent>;

export interface EmergencyLiquidatorRemovedEventObject {
  arg0: string;
}
export type EmergencyLiquidatorRemovedEvent = TypedEvent<
  [string],
  EmergencyLiquidatorRemovedEventObject
>;

export type EmergencyLiquidatorRemovedEventFilter =
  TypedEventFilter<EmergencyLiquidatorRemovedEvent>;

export interface ExpirationDateUpdatedEventObject {
  arg0: number;
}
export type ExpirationDateUpdatedEvent = TypedEvent<
  [number],
  ExpirationDateUpdatedEventObject
>;

export type ExpirationDateUpdatedEventFilter =
  TypedEventFilter<ExpirationDateUpdatedEvent>;

export interface FeesUpdatedEventObject {
  feeInterest: number;
  feeLiquidation: number;
  liquidationPremium: number;
  feeLiquidationExpired: number;
  liquidationPremiumExpired: number;
}
export type FeesUpdatedEvent = TypedEvent<
  [number, number, number, number, number],
  FeesUpdatedEventObject
>;

export type FeesUpdatedEventFilter = TypedEventFilter<FeesUpdatedEvent>;

export interface IncreaseDebtForbiddenModeChangedEventObject {
  arg0: boolean;
}
export type IncreaseDebtForbiddenModeChangedEvent = TypedEvent<
  [boolean],
  IncreaseDebtForbiddenModeChangedEventObject
>;

export type IncreaseDebtForbiddenModeChangedEventFilter =
  TypedEventFilter<IncreaseDebtForbiddenModeChangedEvent>;

export interface LimitPerBlockUpdatedEventObject {
  arg0: BigNumber;
}
export type LimitPerBlockUpdatedEvent = TypedEvent<
  [BigNumber],
  LimitPerBlockUpdatedEventObject
>;

export type LimitPerBlockUpdatedEventFilter =
  TypedEventFilter<LimitPerBlockUpdatedEvent>;

export interface LimitsUpdatedEventObject {
  minBorrowedAmount: BigNumber;
  maxBorrowedAmount: BigNumber;
}
export type LimitsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LimitsUpdatedEventObject
>;

export type LimitsUpdatedEventFilter = TypedEventFilter<LimitsUpdatedEvent>;

export interface MaxEnabledTokensUpdatedEventObject {
  arg0: number;
}
export type MaxEnabledTokensUpdatedEvent = TypedEvent<
  [number],
  MaxEnabledTokensUpdatedEventObject
>;

export type MaxEnabledTokensUpdatedEventFilter =
  TypedEventFilter<MaxEnabledTokensUpdatedEvent>;

export interface NewEmergencyLiquidationDiscountEventObject {
  arg0: number;
}
export type NewEmergencyLiquidationDiscountEvent = TypedEvent<
  [number],
  NewEmergencyLiquidationDiscountEventObject
>;

export type NewEmergencyLiquidationDiscountEventFilter =
  TypedEventFilter<NewEmergencyLiquidationDiscountEvent>;

export interface NewMaxCumulativeLossEventObject {
  arg0: BigNumber;
}
export type NewMaxCumulativeLossEvent = TypedEvent<
  [BigNumber],
  NewMaxCumulativeLossEventObject
>;

export type NewMaxCumulativeLossEventFilter =
  TypedEventFilter<NewMaxCumulativeLossEvent>;

export interface NewTotalDebtLimitEventObject {
  arg0: BigNumber;
}
export type NewTotalDebtLimitEvent = TypedEvent<
  [BigNumber],
  NewTotalDebtLimitEventObject
>;

export type NewTotalDebtLimitEventFilter =
  TypedEventFilter<NewTotalDebtLimitEvent>;

export interface PriceOracleUpgradedEventObject {
  newPriceOracle: string;
}
export type PriceOracleUpgradedEvent = TypedEvent<
  [string],
  PriceOracleUpgradedEventObject
>;

export type PriceOracleUpgradedEventFilter =
  TypedEventFilter<PriceOracleUpgradedEvent>;

export interface RemovedFromUpgradeableEventObject {
  arg0: string;
}
export type RemovedFromUpgradeableEvent = TypedEvent<
  [string],
  RemovedFromUpgradeableEventObject
>;

export type RemovedFromUpgradeableEventFilter =
  TypedEventFilter<RemovedFromUpgradeableEvent>;

export interface TokenAllowedEventObject {
  token: string;
}
export type TokenAllowedEvent = TypedEvent<[string], TokenAllowedEventObject>;

export type TokenAllowedEventFilter = TypedEventFilter<TokenAllowedEvent>;

export interface TokenForbiddenEventObject {
  token: string;
}
export type TokenForbiddenEvent = TypedEvent<
  [string],
  TokenForbiddenEventObject
>;

export type TokenForbiddenEventFilter = TypedEventFilter<TokenForbiddenEvent>;

export interface TokenLiquidationThresholdUpdatedEventObject {
  token: string;
  liquidityThreshold: number;
}
export type TokenLiquidationThresholdUpdatedEvent = TypedEvent<
  [string, number],
  TokenLiquidationThresholdUpdatedEventObject
>;

export type TokenLiquidationThresholdUpdatedEventFilter =
  TypedEventFilter<TokenLiquidationThresholdUpdatedEvent>;

export interface ICreditConfiguratorEvents extends BaseContract {
  contractName: "ICreditConfiguratorEvents";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICreditConfiguratorEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AdapterForbidden(address)"(
      adapter?: PromiseOrValue<string> | null
    ): AdapterForbiddenEventFilter;
    AdapterForbidden(
      adapter?: PromiseOrValue<string> | null
    ): AdapterForbiddenEventFilter;

    "AddedToUpgradeable(address)"(arg0?: null): AddedToUpgradeableEventFilter;
    AddedToUpgradeable(arg0?: null): AddedToUpgradeableEventFilter;

    "ContractAllowed(address,address)"(
      protocol?: PromiseOrValue<string> | null,
      adapter?: PromiseOrValue<string> | null
    ): ContractAllowedEventFilter;
    ContractAllowed(
      protocol?: PromiseOrValue<string> | null,
      adapter?: PromiseOrValue<string> | null
    ): ContractAllowedEventFilter;

    "ContractForbidden(address)"(
      protocol?: PromiseOrValue<string> | null
    ): ContractForbiddenEventFilter;
    ContractForbidden(
      protocol?: PromiseOrValue<string> | null
    ): ContractForbiddenEventFilter;

    "CreditConfiguratorUpgraded(address)"(
      newCreditConfigurator?: PromiseOrValue<string> | null
    ): CreditConfiguratorUpgradedEventFilter;
    CreditConfiguratorUpgraded(
      newCreditConfigurator?: PromiseOrValue<string> | null
    ): CreditConfiguratorUpgradedEventFilter;

    "CreditFacadeUpgraded(address)"(
      newCreditFacade?: PromiseOrValue<string> | null
    ): CreditFacadeUpgradedEventFilter;
    CreditFacadeUpgraded(
      newCreditFacade?: PromiseOrValue<string> | null
    ): CreditFacadeUpgradedEventFilter;

    "CumulativeLossReset()"(): CumulativeLossResetEventFilter;
    CumulativeLossReset(): CumulativeLossResetEventFilter;

    "EmergencyLiquidatorAdded(address)"(
      arg0?: null
    ): EmergencyLiquidatorAddedEventFilter;
    EmergencyLiquidatorAdded(arg0?: null): EmergencyLiquidatorAddedEventFilter;

    "EmergencyLiquidatorRemoved(address)"(
      arg0?: null
    ): EmergencyLiquidatorRemovedEventFilter;
    EmergencyLiquidatorRemoved(
      arg0?: null
    ): EmergencyLiquidatorRemovedEventFilter;

    "ExpirationDateUpdated(uint40)"(
      arg0?: null
    ): ExpirationDateUpdatedEventFilter;
    ExpirationDateUpdated(arg0?: null): ExpirationDateUpdatedEventFilter;

    "FeesUpdated(uint16,uint16,uint16,uint16,uint16)"(
      feeInterest?: null,
      feeLiquidation?: null,
      liquidationPremium?: null,
      feeLiquidationExpired?: null,
      liquidationPremiumExpired?: null
    ): FeesUpdatedEventFilter;
    FeesUpdated(
      feeInterest?: null,
      feeLiquidation?: null,
      liquidationPremium?: null,
      feeLiquidationExpired?: null,
      liquidationPremiumExpired?: null
    ): FeesUpdatedEventFilter;

    "IncreaseDebtForbiddenModeChanged(bool)"(
      arg0?: null
    ): IncreaseDebtForbiddenModeChangedEventFilter;
    IncreaseDebtForbiddenModeChanged(
      arg0?: null
    ): IncreaseDebtForbiddenModeChangedEventFilter;

    "LimitPerBlockUpdated(uint128)"(
      arg0?: null
    ): LimitPerBlockUpdatedEventFilter;
    LimitPerBlockUpdated(arg0?: null): LimitPerBlockUpdatedEventFilter;

    "LimitsUpdated(uint256,uint256)"(
      minBorrowedAmount?: null,
      maxBorrowedAmount?: null
    ): LimitsUpdatedEventFilter;
    LimitsUpdated(
      minBorrowedAmount?: null,
      maxBorrowedAmount?: null
    ): LimitsUpdatedEventFilter;

    "MaxEnabledTokensUpdated(uint8)"(
      arg0?: null
    ): MaxEnabledTokensUpdatedEventFilter;
    MaxEnabledTokensUpdated(arg0?: null): MaxEnabledTokensUpdatedEventFilter;

    "NewEmergencyLiquidationDiscount(uint16)"(
      arg0?: null
    ): NewEmergencyLiquidationDiscountEventFilter;
    NewEmergencyLiquidationDiscount(
      arg0?: null
    ): NewEmergencyLiquidationDiscountEventFilter;

    "NewMaxCumulativeLoss(uint128)"(
      arg0?: null
    ): NewMaxCumulativeLossEventFilter;
    NewMaxCumulativeLoss(arg0?: null): NewMaxCumulativeLossEventFilter;

    "NewTotalDebtLimit(uint128)"(arg0?: null): NewTotalDebtLimitEventFilter;
    NewTotalDebtLimit(arg0?: null): NewTotalDebtLimitEventFilter;

    "PriceOracleUpgraded(address)"(
      newPriceOracle?: PromiseOrValue<string> | null
    ): PriceOracleUpgradedEventFilter;
    PriceOracleUpgraded(
      newPriceOracle?: PromiseOrValue<string> | null
    ): PriceOracleUpgradedEventFilter;

    "RemovedFromUpgradeable(address)"(
      arg0?: null
    ): RemovedFromUpgradeableEventFilter;
    RemovedFromUpgradeable(arg0?: null): RemovedFromUpgradeableEventFilter;

    "TokenAllowed(address)"(
      token?: PromiseOrValue<string> | null
    ): TokenAllowedEventFilter;
    TokenAllowed(
      token?: PromiseOrValue<string> | null
    ): TokenAllowedEventFilter;

    "TokenForbidden(address)"(
      token?: PromiseOrValue<string> | null
    ): TokenForbiddenEventFilter;
    TokenForbidden(
      token?: PromiseOrValue<string> | null
    ): TokenForbiddenEventFilter;

    "TokenLiquidationThresholdUpdated(address,uint16)"(
      token?: PromiseOrValue<string> | null,
      liquidityThreshold?: null
    ): TokenLiquidationThresholdUpdatedEventFilter;
    TokenLiquidationThresholdUpdated(
      token?: PromiseOrValue<string> | null,
      liquidityThreshold?: null
    ): TokenLiquidationThresholdUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}

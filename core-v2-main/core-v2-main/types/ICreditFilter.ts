/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ICreditFilterInterface extends utils.Interface {
  functions: {
    "allowContract(address,address)": FunctionFragment;
    "allowToken(address,uint256)": FunctionFragment;
    "allowanceForAccountTransfers(address,address)": FunctionFragment;
    "allowedContracts(uint256)": FunctionFragment;
    "allowedContractsCount()": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "allowedTokensCount()": FunctionFragment;
    "approveAccountTransfer(address,bool)": FunctionFragment;
    "calcCreditAccountAccruedInterest(address)": FunctionFragment;
    "calcCreditAccountHealthFactor(address)": FunctionFragment;
    "calcThresholdWeightedValue(address)": FunctionFragment;
    "calcTotalValue(address)": FunctionFragment;
    "checkAndEnableToken(address,address)": FunctionFragment;
    "checkCollateralChange(address,address,address,uint256,uint256)": FunctionFragment;
    "checkMultiTokenCollateral(address,uint256[],uint256[],address[],address[])": FunctionFragment;
    "connectCreditManager(address)": FunctionFragment;
    "contractToAdapter(address)": FunctionFragment;
    "enabledTokens(address)": FunctionFragment;
    "forbidContract(address)": FunctionFragment;
    "getCreditAccountTokenById(address,uint256)": FunctionFragment;
    "initEnabledTokens(address)": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "liquidationThresholds(address)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "revertIfAccountTransferIsNotAllowed(address,address)": FunctionFragment;
    "revertIfCantIncreaseBorrowing(address,uint256)": FunctionFragment;
    "revertIfTokenNotAllowed(address)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "updateUnderlyingTokenLiquidationThreshold()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowContract"
      | "allowToken"
      | "allowanceForAccountTransfers"
      | "allowedContracts"
      | "allowedContractsCount"
      | "allowedTokens"
      | "allowedTokensCount"
      | "approveAccountTransfer"
      | "calcCreditAccountAccruedInterest"
      | "calcCreditAccountHealthFactor"
      | "calcThresholdWeightedValue"
      | "calcTotalValue"
      | "checkAndEnableToken"
      | "checkCollateralChange"
      | "checkMultiTokenCollateral"
      | "connectCreditManager"
      | "contractToAdapter"
      | "enabledTokens"
      | "forbidContract"
      | "getCreditAccountTokenById"
      | "initEnabledTokens"
      | "isTokenAllowed"
      | "liquidationThresholds"
      | "priceOracle"
      | "revertIfAccountTransferIsNotAllowed"
      | "revertIfCantIncreaseBorrowing"
      | "revertIfTokenNotAllowed"
      | "underlyingToken"
      | "updateUnderlyingTokenLiquidationThreshold"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceForAccountTransfers",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokensCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveAccountTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCreditAccountAccruedInterest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcCreditAccountHealthFactor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcThresholdWeightedValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTotalValue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndEnableToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCollateralChange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMultiTokenCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "connectCreditManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractToAdapter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "forbidContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountTokenById",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initEnabledTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationThresholds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfAccountTransferIsNotAllowed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfCantIncreaseBorrowing",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfTokenNotAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnderlyingTokenLiquidationThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allowContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowanceForAccountTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokensCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveAccountTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCreditAccountAccruedInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCreditAccountHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcThresholdWeightedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAndEnableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCollateralChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMultiTokenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectCreditManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractToAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbidContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountTokenById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initEnabledTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfAccountTransferIsNotAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfCantIncreaseBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfTokenNotAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnderlyingTokenLiquidationThreshold",
    data: BytesLike
  ): Result;

  events: {
    "ContractAllowed(address,address)": EventFragment;
    "ContractForbidden(address)": EventFragment;
    "NewFastCheckParameters(uint256,uint256)": EventFragment;
    "PriceOracleUpdated(address)": EventFragment;
    "TokenAllowed(address,uint256)": EventFragment;
    "TokenForbidden(address)": EventFragment;
    "TransferAccountAllowed(address,address,bool)": EventFragment;
    "TransferPluginAllowed(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractForbidden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFastCheckParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenForbidden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferAccountAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferPluginAllowed"): EventFragment;
}

export interface ContractAllowedEventObject {
  protocol: string;
  adapter: string;
}
export type ContractAllowedEvent = TypedEvent<
  [string, string],
  ContractAllowedEventObject
>;

export type ContractAllowedEventFilter = TypedEventFilter<ContractAllowedEvent>;

export interface ContractForbiddenEventObject {
  protocol: string;
}
export type ContractForbiddenEvent = TypedEvent<
  [string],
  ContractForbiddenEventObject
>;

export type ContractForbiddenEventFilter =
  TypedEventFilter<ContractForbiddenEvent>;

export interface NewFastCheckParametersEventObject {
  chiThreshold: BigNumber;
  fastCheckDelay: BigNumber;
}
export type NewFastCheckParametersEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewFastCheckParametersEventObject
>;

export type NewFastCheckParametersEventFilter =
  TypedEventFilter<NewFastCheckParametersEvent>;

export interface PriceOracleUpdatedEventObject {
  newPriceOracle: string;
}
export type PriceOracleUpdatedEvent = TypedEvent<
  [string],
  PriceOracleUpdatedEventObject
>;

export type PriceOracleUpdatedEventFilter =
  TypedEventFilter<PriceOracleUpdatedEvent>;

export interface TokenAllowedEventObject {
  token: string;
  liquidityThreshold: BigNumber;
}
export type TokenAllowedEvent = TypedEvent<
  [string, BigNumber],
  TokenAllowedEventObject
>;

export type TokenAllowedEventFilter = TypedEventFilter<TokenAllowedEvent>;

export interface TokenForbiddenEventObject {
  token: string;
}
export type TokenForbiddenEvent = TypedEvent<
  [string],
  TokenForbiddenEventObject
>;

export type TokenForbiddenEventFilter = TypedEventFilter<TokenForbiddenEvent>;

export interface TransferAccountAllowedEventObject {
  from: string;
  to: string;
  state: boolean;
}
export type TransferAccountAllowedEvent = TypedEvent<
  [string, string, boolean],
  TransferAccountAllowedEventObject
>;

export type TransferAccountAllowedEventFilter =
  TypedEventFilter<TransferAccountAllowedEvent>;

export interface TransferPluginAllowedEventObject {
  plugin: string;
  state: boolean;
}
export type TransferPluginAllowedEvent = TypedEvent<
  [string, boolean],
  TransferPluginAllowedEventObject
>;

export type TransferPluginAllowedEventFilter =
  TypedEventFilter<TransferPluginAllowedEvent>;

export interface ICreditFilter extends BaseContract {
  contractName: "ICreditFilter";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICreditFilterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowContract(
      targetContract: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowToken(
      token: PromiseOrValue<string>,
      liquidationThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowanceForAccountTransfers(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowedContracts(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedContractsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowedTokens(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedTokensCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveAccountTransfer(
      from: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcCreditAccountAccruedInterest(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcCreditAccountHealthFactor(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcThresholdWeightedValue(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    calcTotalValue(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    checkAndEnableToken(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkCollateralChange(
      creditAccount: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkMultiTokenCollateral(
      creditAccount: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>[],
      amountOut: PromiseOrValue<BigNumberish>[],
      tokenIn: PromiseOrValue<string>[],
      tokenOut: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    connectCreditManager(
      poolService: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractToAdapter(
      allowedContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    enabledTokens(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forbidContract(
      targetContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCreditAccountTokenById(
      creditAccount: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        balance: BigNumber;
        tv: BigNumber;
        twv: BigNumber;
      }
    >;

    initEnabledTokens(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTokenAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidationThresholds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    revertIfAccountTransferIsNotAllowed(
      onwer: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    revertIfCantIncreaseBorrowing(
      creditAccount: PromiseOrValue<string>,
      minHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    revertIfTokenNotAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    updateUnderlyingTokenLiquidationThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowContract(
    targetContract: PromiseOrValue<string>,
    adapter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowToken(
    token: PromiseOrValue<string>,
    liquidationThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowanceForAccountTransfers(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowedContracts(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  allowedTokens(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

  approveAccountTransfer(
    from: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcCreditAccountAccruedInterest(
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcCreditAccountHealthFactor(
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcThresholdWeightedValue(
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTotalValue(
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkAndEnableToken(
    creditAccount: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkCollateralChange(
    creditAccount: PromiseOrValue<string>,
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    amountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkMultiTokenCollateral(
    creditAccount: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>[],
    amountOut: PromiseOrValue<BigNumberish>[],
    tokenIn: PromiseOrValue<string>[],
    tokenOut: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  connectCreditManager(
    poolService: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractToAdapter(
    allowedContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  enabledTokens(
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forbidContract(
    targetContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCreditAccountTokenById(
    creditAccount: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      token: string;
      balance: BigNumber;
      tv: BigNumber;
      twv: BigNumber;
    }
  >;

  initEnabledTokens(
    creditAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTokenAllowed(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidationThresholds(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  revertIfAccountTransferIsNotAllowed(
    onwer: PromiseOrValue<string>,
    creditAccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  revertIfCantIncreaseBorrowing(
    creditAccount: PromiseOrValue<string>,
    minHealthFactor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  revertIfTokenNotAllowed(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  updateUnderlyingTokenLiquidationThreshold(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowContract(
      targetContract: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowToken(
      token: PromiseOrValue<string>,
      liquidationThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowanceForAccountTransfers(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowedContracts(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    allowedTokens(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    approveAccountTransfer(
      from: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    calcCreditAccountAccruedInterest(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountHealthFactor(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcThresholdWeightedValue(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTotalValue(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAndEnableToken(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkCollateralChange(
      creditAccount: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkMultiTokenCollateral(
      creditAccount: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>[],
      amountOut: PromiseOrValue<BigNumberish>[],
      tokenIn: PromiseOrValue<string>[],
      tokenOut: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    connectCreditManager(
      poolService: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractToAdapter(
      allowedContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    enabledTokens(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forbidContract(
      targetContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCreditAccountTokenById(
      creditAccount: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        balance: BigNumber;
        tv: BigNumber;
        twv: BigNumber;
      }
    >;

    initEnabledTokens(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTokenAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidationThresholds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    revertIfAccountTransferIsNotAllowed(
      onwer: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revertIfCantIncreaseBorrowing(
      creditAccount: PromiseOrValue<string>,
      minHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revertIfTokenNotAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    updateUnderlyingTokenLiquidationThreshold(
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractAllowed(address,address)"(
      protocol?: PromiseOrValue<string> | null,
      adapter?: PromiseOrValue<string> | null
    ): ContractAllowedEventFilter;
    ContractAllowed(
      protocol?: PromiseOrValue<string> | null,
      adapter?: PromiseOrValue<string> | null
    ): ContractAllowedEventFilter;

    "ContractForbidden(address)"(
      protocol?: PromiseOrValue<string> | null
    ): ContractForbiddenEventFilter;
    ContractForbidden(
      protocol?: PromiseOrValue<string> | null
    ): ContractForbiddenEventFilter;

    "NewFastCheckParameters(uint256,uint256)"(
      chiThreshold?: null,
      fastCheckDelay?: null
    ): NewFastCheckParametersEventFilter;
    NewFastCheckParameters(
      chiThreshold?: null,
      fastCheckDelay?: null
    ): NewFastCheckParametersEventFilter;

    "PriceOracleUpdated(address)"(
      newPriceOracle?: PromiseOrValue<string> | null
    ): PriceOracleUpdatedEventFilter;
    PriceOracleUpdated(
      newPriceOracle?: PromiseOrValue<string> | null
    ): PriceOracleUpdatedEventFilter;

    "TokenAllowed(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      liquidityThreshold?: null
    ): TokenAllowedEventFilter;
    TokenAllowed(
      token?: PromiseOrValue<string> | null,
      liquidityThreshold?: null
    ): TokenAllowedEventFilter;

    "TokenForbidden(address)"(
      token?: PromiseOrValue<string> | null
    ): TokenForbiddenEventFilter;
    TokenForbidden(
      token?: PromiseOrValue<string> | null
    ): TokenForbiddenEventFilter;

    "TransferAccountAllowed(address,address,bool)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      state?: null
    ): TransferAccountAllowedEventFilter;
    TransferAccountAllowed(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      state?: null
    ): TransferAccountAllowedEventFilter;

    "TransferPluginAllowed(address,bool)"(
      plugin?: PromiseOrValue<string> | null,
      state?: null
    ): TransferPluginAllowedEventFilter;
    TransferPluginAllowed(
      plugin?: PromiseOrValue<string> | null,
      state?: null
    ): TransferPluginAllowedEventFilter;
  };

  estimateGas: {
    allowContract(
      targetContract: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowToken(
      token: PromiseOrValue<string>,
      liquidationThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowanceForAccountTransfers(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedContracts(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    allowedTokens(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    approveAccountTransfer(
      from: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcCreditAccountAccruedInterest(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcCreditAccountHealthFactor(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcThresholdWeightedValue(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTotalValue(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAndEnableToken(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkCollateralChange(
      creditAccount: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkMultiTokenCollateral(
      creditAccount: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>[],
      amountOut: PromiseOrValue<BigNumberish>[],
      tokenIn: PromiseOrValue<string>[],
      tokenOut: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    connectCreditManager(
      poolService: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractToAdapter(
      allowedContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enabledTokens(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forbidContract(
      targetContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCreditAccountTokenById(
      creditAccount: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initEnabledTokens(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTokenAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationThresholds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    revertIfAccountTransferIsNotAllowed(
      onwer: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfCantIncreaseBorrowing(
      creditAccount: PromiseOrValue<string>,
      minHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfTokenNotAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    updateUnderlyingTokenLiquidationThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowContract(
      targetContract: PromiseOrValue<string>,
      adapter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowToken(
      token: PromiseOrValue<string>,
      liquidationThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowanceForAccountTransfers(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedContracts(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedContractsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedTokensCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveAccountTransfer(
      from: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcCreditAccountAccruedInterest(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCreditAccountHealthFactor(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcThresholdWeightedValue(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTotalValue(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAndEnableToken(
      creditAccount: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkCollateralChange(
      creditAccount: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkMultiTokenCollateral(
      creditAccount: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>[],
      amountOut: PromiseOrValue<BigNumberish>[],
      tokenIn: PromiseOrValue<string>[],
      tokenOut: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    connectCreditManager(
      poolService: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractToAdapter(
      allowedContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enabledTokens(
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forbidContract(
      targetContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCreditAccountTokenById(
      creditAccount: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initEnabledTokens(
      creditAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationThresholds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revertIfAccountTransferIsNotAllowed(
      onwer: PromiseOrValue<string>,
      creditAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertIfCantIncreaseBorrowing(
      creditAccount: PromiseOrValue<string>,
      minHealthFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertIfTokenNotAllowed(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUnderlyingTokenLiquidationThreshold(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

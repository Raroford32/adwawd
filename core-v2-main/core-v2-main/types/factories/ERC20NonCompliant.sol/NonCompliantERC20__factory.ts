/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  NonCompliantERC20,
  NonCompliantERC20Interface,
} from "../../ERC20NonCompliant.sol/NonCompliantERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060cd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063095ea7b314602d575b600080fd5b604060383660046054565b600092915050565b604051901515815260200160405180910390f35b60008060408385031215606657600080fd5b823573ffffffffffffffffffffffffffffffffffffffff81168114608957600080fd5b94602093909301359350505056fea26469706673582212208bfa27dd1721795a47cabd939bf5c1fa37152ffc9d54a3ba39a3415a44feb5f464736f6c634300080a0033";

type NonCompliantERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NonCompliantERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NonCompliantERC20__factory extends ContractFactory {
  constructor(...args: NonCompliantERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NonCompliantERC20";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NonCompliantERC20> {
    return super.deploy(overrides || {}) as Promise<NonCompliantERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NonCompliantERC20 {
    return super.attach(address) as NonCompliantERC20;
  }
  override connect(signer: Signer): NonCompliantERC20__factory {
    return super.connect(signer) as NonCompliantERC20__factory;
  }
  static readonly contractName: "NonCompliantERC20";

  public readonly contractName: "NonCompliantERC20";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NonCompliantERC20Interface {
    return new utils.Interface(_abi) as NonCompliantERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NonCompliantERC20 {
    return new Contract(address, _abi, signerOrProvider) as NonCompliantERC20;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BoundedPriceFeed,
  BoundedPriceFeedInterface,
} from "../../BoundedPriceFeed.sol/BoundedPriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
      {
        internalType: "int256",
        name: "_upperBound",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotImplementedException",
    type: "error",
  },
  {
    inputs: [],
    name: "aggregator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "idx",
        type: "uint16",
      },
    ],
    name: "phaseAggregators",
    outputs: [
      {
        internalType: "contract AggregatorV2V3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "phaseId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedType",
    outputs: [
      {
        internalType: "enum PriceFeedType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "skipPriceCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "upperBound",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162000caa38038062000caa8339810160408190526200003491620001ff565b6001600160a01b038216608081905260408051633942720b60e11b81529051637284e416916004808201926000929091908290030181865afa1580156200007f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000a9919081019062000284565b604051602001620000bb91906200033c565b60405160208183030381529060405260009080519060200190620000e192919062000159565b506080516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014991906200036a565b60ff1660c05260a05250620003d3565b828054620001679062000396565b90600052602060002090601f0160209004810192826200018b5760008555620001d6565b82601f10620001a657805160ff1916838001178555620001d6565b82800160010185558215620001d6579182015b82811115620001d6578251825591602001919060010190620001b9565b50620001e4929150620001e8565b5090565b5b80821115620001e45760008155600101620001e9565b600080604083850312156200021357600080fd5b82516001600160a01b03811681146200022b57600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200026e57818101518382015260200162000254565b838111156200027e576000848401525b50505050565b6000602082840312156200029757600080fd5b81516001600160401b0380821115620002af57600080fd5b818401915084601f830112620002c457600080fd5b815181811115620002d957620002d96200023b565b604051601f8201601f19908116603f011681019083821181831017156200030457620003046200023b565b816040528281528760208487010111156200031e57600080fd5b6200033183602083016020880162000251565b979650505050505050565b600082516200035081846020870162000251565b6708109bdd5b99195960c21b920191825250600801919050565b6000602082840312156200037d57600080fd5b815160ff811681146200038f57600080fd5b9392505050565b600181811c90821680620003ab57607f821691505b60208210811415620003cd57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05161087d6200042d6000396000610110015260008181610215015281816105cd01526105fa0152600081816101a40152818161026e015281816103040152818161048e015261051e015261087d6000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063741bef1a11610081578063c15973041161005b578063c159730414610237578063d62ada111461024a578063feaf968c1461026257600080fd5b8063741bef1a1461019f5780639a6fc8f5146101c6578063b09ad8a01461021057600080fd5b806354fd4d50116100b257806354fd4d501461015957806358303b101461016f5780637284e4161461018a57600080fd5b8063245a7bfc146100d9578063313ce5671461010b5780633fd0875f14610144575b600080fd5b6100e161026a565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101327f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610102565b61014c600781565b604051610102919061061f565b610161600181565b604051908152602001610102565b610177610300565b60405161ffff9091168152602001610102565b610192610391565b6040516101029190610660565b6100e17f000000000000000000000000000000000000000000000000000000000000000081565b6101d96101d43660046106ee565b61041f565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610102565b6101617f000000000000000000000000000000000000000000000000000000000000000081565b6100e1610245366004610722565b610459565b610252600081565b6040519015158152602001610102565b6101d9610514565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663245a7bfc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610761565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166358303b106040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb919061077e565b6000805461039e9061079b565b80601f01602080910402602001604051908101604052809291908181526020018280546103ca9061079b565b80156104175780601f106103ec57610100808354040283529160200191610417565b820191906000526020600020905b8154815290600101906020018083116103fa57829003601f168201915b505050505081565b60008060008060006040517f24e46f7000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fc159730400000000000000000000000000000000000000000000000000000000815261ffff821660048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c159730490602401602060405180830381865afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190610761565b92915050565b60008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906107ef565b9398509196509450925090506105c0846105c9565b93509091929394565b60007f000000000000000000000000000000000000000000000000000000000000000082136105f8578161050e565b7f000000000000000000000000000000000000000000000000000000000000000092915050565b60208101600e831061065a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b600060208083528351808285015260005b8181101561068d57858101830151858201604001528201610671565b8181111561069f576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b69ffffffffffffffffffff811681146106eb57600080fd5b50565b60006020828403121561070057600080fd5b813561070b816106d3565b9392505050565b61ffff811681146106eb57600080fd5b60006020828403121561073457600080fd5b813561070b81610712565b73ffffffffffffffffffffffffffffffffffffffff811681146106eb57600080fd5b60006020828403121561077357600080fd5b815161070b8161073f565b60006020828403121561079057600080fd5b815161070b81610712565b600181811c908216806107af57607f821691505b602082108114156107e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600080600080600060a0868803121561080757600080fd5b8551610812816106d3565b809550506020860151935060408601519250606086015191506080860151610839816106d3565b80915050929550929590935056fea264697066735822122098e574cf8f2a78d208683560a0c5711e1080b74957c7cf8f9dbbf846c535c55c64736f6c634300080a0033";

type BoundedPriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BoundedPriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BoundedPriceFeed__factory extends ContractFactory {
  constructor(...args: BoundedPriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BoundedPriceFeed";
  }

  override deploy(
    _priceFeed: PromiseOrValue<string>,
    _upperBound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BoundedPriceFeed> {
    return super.deploy(
      _priceFeed,
      _upperBound,
      overrides || {}
    ) as Promise<BoundedPriceFeed>;
  }
  override getDeployTransaction(
    _priceFeed: PromiseOrValue<string>,
    _upperBound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_priceFeed, _upperBound, overrides || {});
  }
  override attach(address: string): BoundedPriceFeed {
    return super.attach(address) as BoundedPriceFeed;
  }
  override connect(signer: Signer): BoundedPriceFeed__factory {
    return super.connect(signer) as BoundedPriceFeed__factory;
  }
  static readonly contractName: "BoundedPriceFeed";

  public readonly contractName: "BoundedPriceFeed";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BoundedPriceFeedInterface {
    return new utils.Interface(_abi) as BoundedPriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BoundedPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as BoundedPriceFeed;
  }
}

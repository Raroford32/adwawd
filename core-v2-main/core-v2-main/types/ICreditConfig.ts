/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type CollateralTokenStruct = {
  token: PromiseOrValue<string>;
  liquidationThreshold: PromiseOrValue<BigNumberish>;
};

export type CollateralTokenStructOutput = [string, number] & {
  token: string;
  liquidationThreshold: number;
};

export type CreditManagerOptsStruct = {
  minBorrowedAmount: PromiseOrValue<BigNumberish>;
  maxBorrowedAmount: PromiseOrValue<BigNumberish>;
  collateralTokens: CollateralTokenStruct[];
  degenNFT: PromiseOrValue<string>;
  blacklistHelper: PromiseOrValue<string>;
  expirable: PromiseOrValue<boolean>;
};

export type CreditManagerOptsStructOutput = [
  BigNumber,
  BigNumber,
  CollateralTokenStructOutput[],
  string,
  string,
  boolean
] & {
  minBorrowedAmount: BigNumber;
  maxBorrowedAmount: BigNumber;
  collateralTokens: CollateralTokenStructOutput[];
  degenNFT: string;
  blacklistHelper: string;
  expirable: boolean;
};

export type PriceFeedConfigStruct = {
  token: PromiseOrValue<string>;
  priceFeed: PromiseOrValue<string>;
};

export type PriceFeedConfigStructOutput = [string, string] & {
  token: string;
  priceFeed: string;
};

export interface ICreditConfigInterface extends utils.Interface {
  functions: {
    "getAccountAmount()": FunctionFragment;
    "getCollateralTokens()": FunctionFragment;
    "getCreditOpts()": FunctionFragment;
    "getPriceFeeds()": FunctionFragment;
    "maxBorrowedAmount()": FunctionFragment;
    "minBorrowedAmount()": FunctionFragment;
    "tokenTestSuite()": FunctionFragment;
    "underlying()": FunctionFragment;
    "wethToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountAmount"
      | "getCollateralTokens"
      | "getCreditOpts"
      | "getPriceFeeds"
      | "maxBorrowedAmount"
      | "minBorrowedAmount"
      | "tokenTestSuite"
      | "underlying"
      | "wethToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditOpts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBorrowedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBorrowedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTestSuite",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wethToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getAccountAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditOpts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBorrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBorrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTestSuite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wethToken", data: BytesLike): Result;

  events: {};
}

export interface ICreditConfig extends BaseContract {
  contractName: "ICreditConfig";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICreditConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateralTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCreditOpts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPriceFeeds(
      overrides?: CallOverrides
    ): Promise<[PriceFeedConfigStructOutput[]]>;

    maxBorrowedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBorrowedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenTestSuite(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    wethToken(overrides?: CallOverrides): Promise<[string]>;
  };

  getAccountAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateralTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCreditOpts(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPriceFeeds(
    overrides?: CallOverrides
  ): Promise<PriceFeedConfigStructOutput[]>;

  maxBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  tokenTestSuite(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  wethToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAccountAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokens(
      overrides?: CallOverrides
    ): Promise<CollateralTokenStructOutput[]>;

    getCreditOpts(
      overrides?: CallOverrides
    ): Promise<CreditManagerOptsStructOutput>;

    getPriceFeeds(
      overrides?: CallOverrides
    ): Promise<PriceFeedConfigStructOutput[]>;

    maxBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTestSuite(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    wethToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAccountAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCreditOpts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPriceFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    maxBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenTestSuite(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    wethToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCreditOpts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPriceFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBorrowedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBorrowedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenTestSuite(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
